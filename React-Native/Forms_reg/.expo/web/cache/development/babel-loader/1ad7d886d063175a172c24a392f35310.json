{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React from \"react\";\nimport AppNavigator from \"./navigations/AppNavigator\";\nimport 'react-native-gesture-handler';\nimport * as Font from \"expo-font\";\nimport AppLoading from \"expo-app-loading\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nvar App = function (_React$Component) {\n  _inherits(App, _React$Component);\n\n  var _super = _createSuper(App);\n\n  function App() {\n    var _this;\n\n    _classCallCheck(this, App);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n    _this.state = {\n      isFontLoaded: false\n    };\n    return _this;\n  }\n\n  _createClass(App, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      return _regeneratorRuntime.async(function componentDidMount$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return _regeneratorRuntime.awrap(Font.loadAsync({\n                \"SemiBold\": require(\"./fonts/Montserrat-SemiBold.otf\"),\n                \"Medium\": require(\"./fonts/Montserrat-Medium.otf\"),\n                \"Regular\": require(\"./fonts/Montserrat-Regular.otf\")\n              }));\n\n            case 2:\n              this.setState({\n                isFontLoaded: true\n              });\n\n            case 3:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, this, null, Promise);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return this.state.isFontLoaded === true ? _jsx(AppNavigator, {}) : _jsx(AppLoading, {});\n    }\n  }]);\n\n  return App;\n}(React.Component);\n\nexport { App as default };","map":{"version":3,"sources":["C:/Users/admin/Documents/2_курс_СЕМЫ/Семы по мобилке/React-native projects/CD26/App.js"],"names":["React","AppNavigator","Font","AppLoading","App","state","isFontLoaded","loadAsync","require","setState","Component"],"mappings":";;;;;;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,YAAP;AACA,OAAO,8BAAP;AACA,OAAO,KAAKC,IAAZ,MAAsB,WAAtB;AACA,OAAOC,UAAP,MAAuB,kBAAvB;;;IAEqBC,G;;;;;;;;;;;;;;;UACnBC,K,GAAQ;AACNC,MAAAA,YAAY,EAAE;AADR,K;;;;;;WAIR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+CACQJ,IAAI,CAACK,SAAL,CAAe;AACnB,4BAAYC,OAAO,mCADA;AAEnB,0BAAUA,OAAO,iCAFE;AAGnB,2BAAWA,OAAO;AAHC,eAAf,CADR;;AAAA;AAME,mBAAKC,QAAL,CAAc;AAACH,gBAAAA,YAAY,EAAC;AAAd,eAAd;;AANF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;WASA,kBAAS;AACP,aACK,KAAKD,KAAL,CAAWC,YAAX,KAA4B,IAA7B,GAAsC,KAAC,YAAD,KAAtC,GAAwD,KAAC,UAAD,KAD5D;AAGD;;;;EAlB8BN,KAAK,CAACU,S;;SAAlBN,G","sourcesContent":["import React from \"react\";\nimport AppNavigator from \"./navigations/AppNavigator\";\nimport 'react-native-gesture-handler';\nimport * as Font from \"expo-font\"\nimport AppLoading from \"expo-app-loading\"\n\nexport default class App extends React.Component {\n  state = {\n    isFontLoaded: false\n  }\n\n  async componentDidMount() {\n    await Font.loadAsync({\n      \"SemiBold\": require(\"./fonts/Montserrat-SemiBold.otf\"),\n      \"Medium\": require(\"./fonts/Montserrat-Medium.otf\"),\n      \"Regular\": require(\"./fonts/Montserrat-Regular.otf\"),\n    })\n    this.setState({isFontLoaded:true})\n  }\n\n  render() {\n    return (\n        (this.state.isFontLoaded === true) ? (<AppNavigator/>):(<AppLoading/>)\n    )\n  }\n}"]},"metadata":{},"sourceType":"module"}